#!/usr/bin/env python3
# Copyright 2017 by Alexis Pietak & Cecil Curry.
# See "LICENSE" for further details.

'''
Classes defining this application's graphical user interface (GUI).
'''

#FIXME: To simplify future localization efforts, all human-readable strings to
#be displayed should be filtered through the Qt translate() function. Note that
#the external "pyside2-lupdate" command will probably need to be called to
#convert raw translation files into importable Python modules.

# ....................{ IMPORTS                            }....................
from betsee import pathtree
from betsee.lib.pyside import psdui

# ....................{ GLOBALS                            }....................
#FIXME: PySide and hence presumably PySide2 as well lacks an analogue to the
#loadUiType() function. To circumvent this, consider defining our own
#loadUiType() function performing the equivalent thereof. This is low-hanging
#fruit. Since doing so on every GUI startup is presumably inefficient, however,
#this should also be improved in the long-term to perform caching: namely,
#
#* On the first execution of the GUI:
#  1. Convert the UI file referenced below into in-memory Python code.
#  2. Convert that code into a Python file, presumably cached in the current
#     dot directory for BETSE (e.g., "~/.betse/").
#* On all subsequent executions of the GUI:
#  1. Compare the time stamps of this UI file and this cached Python file.
#  2. If the time stamps are the same, reuse the latter as is.
#  3. Else, recreate the latter as above and use the newly cached file.

# ....................{ CLASSES                            }....................
class BetseeGUI(object):
    '''
    Graphical user interface (GUI) for this application, doubling as both the
    main window and root Qt widget for this application.
    '''

    # ..................{ INITIALIZERS                       }..................
    def __init__(self, *args, **kwargs) -> None:

        # Initialize our superclass with all passed parameters.
        super().__init__(*args, **kwargs)

        #FIXME: Convert BETSEE's QRC file to a Python file *BEFORE* converting
        #its UI file to a Python type below. Sadly, the code generated by the
        #latter conversion appears to expect the Python file generated by the
        #former conversion to be a top-level module importable at the top-level
        #of the Python package tree (!): e.g.,
        #
        #    # The last line of the code generated by the latter conversion.
        #    import betsee_rc
        #
        #Incidentally, an upstream issue should probably be filed about this.
        #Only Python 2.x supports such implicit relative imports. Under Python
        #3.x, all relative imports are required to be explicit: e.g.,
        #
        #    from . import betsee_rc
        #
        #Clearly, however, we want neither of the import statements above. This
        #implies that we'll probably need to perform a regex-based replacement
        #of all lines matching "^import (\w+)_rc$" and replacing them with
        #something instead resembling "import betsee.data.qrc.$1_rc". That said,
        #we'll probably want to generate the temporary "betsee_rc" in a
        #"~/.betse/betsee_cache/" dot subdirectory -- which means that we'll
        #want to append "~/.betse/betsee_cache/" to the "sys.path" list, which
        #would then permit us to import such generated modules as
        #"from betsee_cache import $1_rc".
        #
        #It's not going to be particularly pretty, but we see little
        #alternatives here. Actually, rather than performing an after-the-fact
        #regular expression replacement, it *SHOULD* be feasible to monkey-patch
        #the "pyside2uic" codebase before-the-fact to coerce the compiler to
        #emit *EXACTLY* the code we require. Let's examine this aveneu first.
        #
        #Hmm; yes. We see. The pyside2uic.uiparser.UIParser.readResources()
        #method performs the desired operation. We *COULD* monkey-patch this
        #method, but doing so would be considerably more fragile than simply
        #modifying the resulting string after-the-fact. Fragility is bad. Let's
        #go with the regex-based replacement, please.

        # UI class generated from the XML-formatted Qt Designer file specifying
        # the non-dynamic core of the BETSEE GUI (i.e., excluding dynamic
        # signals and slots), which requires Python logic.
        psdui.convert_ui_file_to_type(
            ui_filename=pathtree.get_main_ui_filename())
