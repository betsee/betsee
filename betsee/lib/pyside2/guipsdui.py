#!/usr/bin/env python3
# --------------------( LICENSE                           )--------------------
# Copyright 2017-2018 by Alexis Pietak & Cecil Curry.
# See "LICENSE" for further details.

'''
Low-level :mod:`PySide2` XML-formatted user interface (UI) facilities.
'''

# ....................{ IMPORTS                           }....................
from PySide2.QtCore import QCoreApplication
from betse.util.py import pymodule
from betse.util.type import types
from betse.util.type.types import type_check, SequenceTypes
from betsee import guimetadata
from betsee.guiexception import BetseeCacheException

# ....................{ GLOBALS                           }....................
BASE_CLASSES_GLOBAL_NAME = '__{}_BASE_CLASSES'.format(guimetadata.NAME)
'''
Unqualified name of the application-specific global appended to the Python code
generated by the :func:`convert_ui_to_py_file` function.

This global declares the sequence of all base classes that the main window Qt
widget subclass for this application is expected to subclass (in order).

Caveats
----------
To avoid conflict with :mod:`PySide2`-generated attribute names, the name of
this global is intentionally obfuscated in an application-specific manner.
'''

# ....................{ GETTERS                           }....................
@type_check
def get_ui_module_base_classes(ui_module_name: str) -> SequenceTypes:
    '''
    Sequence of all base classes declared by the user interface (UI) module
    with the passed name and intended to be subclassed by the Qt widget
    subclass implementing this UI.

    The :func:`convert_ui_to_py_file` function is assumed to have generated
    this module from an XML-formatted file exported by the external Qt Designer
    GUI.

    Parameters
    ----------
    ui_module_name : str
        Fully-qualified name of the UI module to be imported and inspected by
        this function. Since this module is dynamically generated at runtime
        and hence *not* guaranteed to exist, this function explicitly validates
        this module to both exist and declare this sequence..

    Raises
    ----------
    BetseModuleException
        If this module is unimportable.
    BetseeCacheException
        If this module declares no such sequence.
    '''

    # UI module if importable *OR* raise an exception otherwise.
    ui_module = pymodule.import_module(
        module_name=ui_module_name,
        exception_message=QCoreApplication.translate(
            'get_ui_module_base_classes',
            'Module "{0}" not found (e.g., as'
            'module "betsee.gui.window.guimainwindow" imported before '
            'module "betsee.lib.pyside2.cache.guipsdcache").'.format(ui_module_name)
        ))

    # Sequence of all base classes if declared by this module or None otherwise.
    ui_base_classes = getattr(ui_module, BASE_CLASSES_GLOBAL_NAME, None)

    # Fully-qualified name of this sequence for use in exception messages.
    ui_base_classes_name = '{}.{}'.format(
        ui_module_name, BASE_CLASSES_GLOBAL_NAME)

    # If no such sequence is declared, raise an exception.
    if ui_base_classes is None:
        raise BetseeCacheException(QCoreApplication.translate(
            'get_ui_module_base_classes',
            'Sequence "{0}" undefined.'.format(ui_base_classes_name)))

    # If this sequence is *NOT* a sequence, raise an exception. While this
    # check is also performed by the @type_check decorator, the following
    # length check implicitly assumes this variable to be a sequence.
    if not types.is_sequence_nonstr(ui_base_classes):
        raise BetseeCacheException(QCoreApplication.translate(
            'get_ui_module_base_classes',
            'Variable "{0}" type {1!r} not a non-string sequence.'.format(
                ui_base_classes_name, type(ui_base_classes))))

    # If this sequence does *NOT* contain two items, raise an exception.
    if len(ui_base_classes) != 2:
        raise BetseeCacheException(QCoreApplication.translate(
            'get_ui_module_base_classes',
            'Sequence "{0}" length {1} not 2.'.format(
                ui_base_classes_name, len(ui_base_classes))))

    # Else, return this sequence.
    return ui_base_classes
